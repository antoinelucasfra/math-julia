
# ## Functions

function hello1(name)
    println("What's up $name ?")
end
#----------------------------------------------------------------------------

hello1("doc")
#----------------------------------------------------------------------------

function collatz(x)
    if Bool(x & 1)
        3 * x + 1
    else
        x / 2
    end
end
#----------------------------------------------------------------------------

collatz(10)
#----------------------------------------------------------------------------

function f1(x)
    println(x)
    x+1
end
f1(4)
#----------------------------------------------------------------------------


@code_llvm optimize=false f1(4)
#----------------------------------------------------------------------------

@code_native f1(4)
#----------------------------------------------------------------------------

hello2(name) = println("What's up $name ?")
#----------------------------------------------------------------------------

f2(x) = x ^2
#----------------------------------------------------------------------------

f2(4)
#----------------------------------------------------------------------------

whatsup = name -> println("What's up $name ?")
#----------------------------------------------------------------------------

whatsup("doc")
#----------------------------------------------------------------------------

f3 = x ->  x^3
#----------------------------------------------------------------------------

f3(4)
#----------------------------------------------------------------------------

# ## Duck-typing

whatsup(4308)
#----------------------------------------------------------------------------

A = rand(3,3)
try
    f1(A)
catch e
    println(e)
end
#----------------------------------------------------------------------------

# `v^2` for a vector is ambiguous

v = rand(3)
#----------------------------------------------------------------------------

try
    f2(v)
catch e
    println(e)
end
    
#----------------------------------------------------------------------------

# ### Mutating vs. non-mutating functions

v = [3, 7, 4, 1, 4]
#----------------------------------------------------------------------------

sort(v)
#----------------------------------------------------------------------------

v
#----------------------------------------------------------------------------

sort!(v)
#----------------------------------------------------------------------------

v
#----------------------------------------------------------------------------

A = collect(1:8)
function norm( X )
    for (i,a) in enumerate(X)
        X[i] = a * a  ## X Array is mofified in norm function
    end
    sqrt(sum(X))
end
norm(A)
#----------------------------------------------------------------------------

A
#----------------------------------------------------------------------------

# ### Broadcasting

A = [i + 3*j for j in 0:2, i in 1:3]
#----------------------------------------------------------------------------

f = x -> x * x

f(A)
#----------------------------------------------------------------------------

f.(A)
#----------------------------------------------------------------------------

v = [1,2,3]
#----------------------------------------------------------------------------

f.(v)
#----------------------------------------------------------------------------

try 
    f(v)
catch e
    println(e)
end
    
#----------------------------------------------------------------------------

function is_prime(n::Int)
    n < 4 && return true
    n % 2 == 0 && return false
    k = 3
    while (k*k <= n)
        n % k == 0 && return false
        k += 2
    end
    return true
end
#----------------------------------------------------------------------------

[i for i = 1:20 if is_prime(i)]
#----------------------------------------------------------------------------

a=1
g(x)=a+x
g(1)
#----------------------------------------------------------------------------

a=1
function gg(x)
    x+a
end
gg(1)
#----------------------------------------------------------------------------

a=1
function gg(x)    
    a=2
    x+a
end
gg(1), a
#----------------------------------------------------------------------------

function gg(x, a)
     a=2
    x+a
end
gg(1), a  
#----------------------------------------------------------------------------

# # Anonymous Functions

x -> x^2 + 2x - 1
#----------------------------------------------------------------------------

map(x -> x^2 + 2x - 1, [1,3,-1])
#----------------------------------------------------------------------------

filter( x -> x%3==0, 1:10)
#----------------------------------------------------------------------------
