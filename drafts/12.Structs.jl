
# # Struct
# 
# 

mutable struct Grid1D
    start::Float64
    stop::Float64
    length::Int32
end
#----------------------------------------------------------------------------

mesh = Grid1D(0,1,10)
#----------------------------------------------------------------------------

mesh.start
#----------------------------------------------------------------------------

mesh.stop
#----------------------------------------------------------------------------

mesh.length
#----------------------------------------------------------------------------

# # Constructor

mutable struct Grid1D
    start  :: Float64
    stop   :: Float64
    length :: Int32
    step   :: Float64
    points :: Vector{Float64}
    
    function Grid1D( start, stop, length )
        step = (stop - start ) / length
        points = [ x for x = start:step:stop ]
        new(start, stop, length, step, points)
    end
    
end

mesh = Grid1D(0.0, 1.0, 10)
#----------------------------------------------------------------------------

mesh.step
#----------------------------------------------------------------------------

mesh.points
#----------------------------------------------------------------------------

# # Overloading representation
# 
# Example with `show`

function Base.show(io::IO,g::Grid1D)
    print(io, "1D : domain [$(g.start) , $(g.stop)] , $(g.length) points\n")
end
#----------------------------------------------------------------------------

@show mesh
#----------------------------------------------------------------------------

println(mesh)
#----------------------------------------------------------------------------

function Base.size(g::Grid1D)
    return g.length
end
#----------------------------------------------------------------------------

size(mesh)
#----------------------------------------------------------------------------

# # 2D Mesh Grid

mutable struct Grid2D
    xmin :: Float64
    xmax :: Float64
    nx   :: Int32
    ymin :: Float64
    ymax :: Float64
    ny   :: Int32
end
#----------------------------------------------------------------------------

# # Overloading operators
# 

function ⊗(gx::Grid1D, gy::Grid1D) :: Grid2D
    return Grid2D(gx.start, gx.stop, gx.length,
                  gy.start, gy.stop, gy.length)
end
#----------------------------------------------------------------------------

Grid1D(0,1,5) ⊗ Grid1D(0,1,5)
#----------------------------------------------------------------------------

# # Iterators

Base.iterate(g::Grid1D, state=1) = begin
    if state > g.length +1 
        return nothing
    else
        return (g.start+(g.stop-g.start)*(state-1)/g.length , state+1)
    end
end
#----------------------------------------------------------------------------

grid = Grid1D(0,1,10)
#----------------------------------------------------------------------------

iterate(grid)
#----------------------------------------------------------------------------

for x in grid
    println(x)
end
#----------------------------------------------------------------------------

0.5 in grid
#----------------------------------------------------------------------------

using Statistics
mean(grid), std(grid)
#----------------------------------------------------------------------------


#----------------------------------------------------------------------------
