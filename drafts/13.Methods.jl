
# # Methods
# 

function f(x::Any)
    gamma(x+1)
end
#----------------------------------------------------------------------------

function f(n::Integer)
    factorial(n)
end
#----------------------------------------------------------------------------

f(3.0)
#----------------------------------------------------------------------------

f(3)
#----------------------------------------------------------------------------

f(im)
#----------------------------------------------------------------------------

f(-2)
#----------------------------------------------------------------------------

factorial(sqrt(2))
#----------------------------------------------------------------------------

f(sqrt(2))
#----------------------------------------------------------------------------

# # Interval Arithmetic

struct Interval{T<:Real} <: Number
  lo::T
  hi::T
end

(a::Real)..(b::Real) = Interval(a,b)

Base.show(io::IO, iv::Interval) = print(io, "($(iv.lo))..($(iv.hi))")
#----------------------------------------------------------------------------

1..2
#----------------------------------------------------------------------------

typeof(ans)
#----------------------------------------------------------------------------

sizeof(1..2) 
#----------------------------------------------------------------------------

(1.5)..(2.5)
#----------------------------------------------------------------------------

typeof(ans)
#----------------------------------------------------------------------------

(1//2)..(2//3)
#----------------------------------------------------------------------------

typeof(ans)
#----------------------------------------------------------------------------

sizeof((1//2)..(2//3)) 
#----------------------------------------------------------------------------

methods(Interval)
#----------------------------------------------------------------------------

try
    (0.5)..(1)
catch e
    println(e)
end
#----------------------------------------------------------------------------

Interval(lo::Real, hi::Real) = Interval(promote(lo,hi)...)
#----------------------------------------------------------------------------

(0.5)..1
#----------------------------------------------------------------------------

1..π
#----------------------------------------------------------------------------

ℯ..π
#----------------------------------------------------------------------------

import Base: +, -
+(a::Interval, b::Interval) = (a.lo + b.lo)..(a.hi + b.hi)
-(a::Interval, b::Interval) = (a.lo - b.hi)..(a.hi - b.lo)
#----------------------------------------------------------------------------

(2..3) + (-1..1)
#----------------------------------------------------------------------------

(2..3) - (1..2)
#----------------------------------------------------------------------------

import Base: convert, promote_rule

convert(::Type{Interval{T}}, x::Real) where {T<:Real} = (x = convert(T,x); x..x)
convert(::Type{Interval{T}}, iv::Interval) where {T<:Real} =
    convert(T,iv.lo)..convert(T,iv.hi)

promote_rule(::Type{Interval{A}}, ::Type{B}) where {A<:Real,B<:Real} = 
    Interval{promote_type(A,B)}
promote_rule(::Type{Interval{A}}, ::Type{Interval{B}}) where {A<:Real,B<:Real} =
    Interval{promote_type(A,B)}
#----------------------------------------------------------------------------

1..2 + 1
#----------------------------------------------------------------------------

1..2 + 1.5
#----------------------------------------------------------------------------

3 - 1..2 + 2//3
#----------------------------------------------------------------------------

big(2)^100 + (1//3)..(2//3)
#----------------------------------------------------------------------------

typeof(ans)
#----------------------------------------------------------------------------

@which big(2)^100 + (1//3)..(2//3)
#----------------------------------------------------------------------------

±(a::Real    , b::Real )    = (a - b)..(a + b)
±(a::Interval, b::Interval) = (a.lo - b.hi)..(a.hi + b.hi)
±(a::Number  , b::Number )  = ±(promote(a,b)...)
#----------------------------------------------------------------------------

1 ± 2
#----------------------------------------------------------------------------

π - (2 ± 1//2)
#----------------------------------------------------------------------------


#----------------------------------------------------------------------------
