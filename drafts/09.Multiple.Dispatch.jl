
# # Multiple dispatch

methods(+)
#----------------------------------------------------------------------------

@which 3 + 3
#----------------------------------------------------------------------------

@which 3. + 3.
#----------------------------------------------------------------------------

@which 3 + 3.
#----------------------------------------------------------------------------

import Base: +
#----------------------------------------------------------------------------

"hello " + "world!"
#----------------------------------------------------------------------------

@which "hello " + "world!"
#----------------------------------------------------------------------------

+(x::String, y:: String) = string(x, y)
#----------------------------------------------------------------------------

"hello " + "world!"
#----------------------------------------------------------------------------

@which "hello " + "world!"
#----------------------------------------------------------------------------

foo(x, y) = println("duck-typed foo")
foo(x::Int, y::Float64) = println("foo: Int + Float64")
foo(x::Int, y::Int) = println("foo: Two Ints")
#----------------------------------------------------------------------------

foo(1,1)
#----------------------------------------------------------------------------

foo(1.,1.)
#----------------------------------------------------------------------------

foo(1,1.)
#----------------------------------------------------------------------------

foo(true, false)
#----------------------------------------------------------------------------

f(a::Any, b) = "fallback"
f(a::Number, b::Number) = "a and b are both numbers"
f(a::Number, b) = "a is a number"
f(a, b::Number) = "b is a number"
f(a::Integer, b::Integer) = "a and b are both integers"
#----------------------------------------------------------------------------

methods(f)
#----------------------------------------------------------------------------

f2(x) = f(x, x)
f2("foo")
#----------------------------------------------------------------------------

f(a::String, b::String) = "a and b are both strings"
#----------------------------------------------------------------------------

f2("foo")
#----------------------------------------------------------------------------

struct Interval{T<:Real} <: Number
  lo::T
  hi::T
end

(a::Real)..(b::Real) = Interval(a,b)

Base.show(io::IO, iv::Interval) = print(io, "($(iv.lo))..($(iv.hi))")
#----------------------------------------------------------------------------

1..2
#----------------------------------------------------------------------------

typeof(ans)
#----------------------------------------------------------------------------


#----------------------------------------------------------------------------

f(1.5,2)
#----------------------------------------------------------------------------

f(1,"bar")
#----------------------------------------------------------------------------

f(1,2)
#----------------------------------------------------------------------------

f("foo",[1,2])
#----------------------------------------------------------------------------

f(a::T, b::T) where {T<:Number} = "a and b are both $(T)s"

#----------------------------------------------------------------------------

f(big(1.5),big(2.5))
#----------------------------------------------------------------------------

f(big(1),big(2)) ##<== integer rule is more specific
#----------------------------------------------------------------------------

f("foo","bar") ##<== still doesn't apply to non-numbers
#----------------------------------------------------------------------------

f(args::Number...) = "$(length(args))-ary heterogeneous call"
f(args::T...) where {T<:Number} = "$(length(args))-ary homogeneous call"
#----------------------------------------------------------------------------

f(1)
#----------------------------------------------------------------------------

f(1,2,3)
#----------------------------------------------------------------------------

f(1,1.5,2)
#----------------------------------------------------------------------------

f() ## why is it heterogeneous not homogeneous?
#----------------------------------------------------------------------------

f(1,2) ##previous 2-arg method is more specific
#----------------------------------------------------------------------------

f("foo")
#----------------------------------------------------------------------------

methods(Interval)
#----------------------------------------------------------------------------

a::Interval + b::Interval = (a.lo + b.lo)..(a.hi + b.hi)
a::Interval - b::Interval = (a.lo - b.hi)..(a.hi - b.lo)
#----------------------------------------------------------------------------

(2..3) + (-1..1)
#----------------------------------------------------------------------------


#----------------------------------------------------------------------------


#----------------------------------------------------------------------------
